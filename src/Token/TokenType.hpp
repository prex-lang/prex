#pragma once
enum TokenType {
  // keywords
  KEYWORD_DEFUN,
  KEYWORD_RET,
  KEYWORD_IF,
  KEYWORD_ELSE,
  KEYWORD_LOOP,
  KEYWORD_FOR,
  KEYWORD_STRUCT,
  KEYWORD_ENUM,
  KEYWORD_USE,
  KEYWORD_IMPORT,
  KEYWORD_AS,
  KEYWORD_FROM,
  KEYWORD_IMPL,
  KEYWORD_TRUE,
  KEYWORD_FALSE,

  // symbols
  SYMBOL_PLUS,
  SYMBOL_MINUS,
  SYMBOL_MULTIPLY,
  SYMBOL_DIVIDE,
  SYMBOL_MODULO,
  SYMBOL_ASSIGN,
  SYMBOL_LPAREN,
  SYMBOL_RPAREN,
  SYMBOL_LBRACE,
  SYMBOL_RBRACE,
  SYMBOL_LBRACKET,
  SYMBOL_RBRACKET,
  SYMBOL_SEMICOLON,
  SYMBOL_COMMA,
  SYMBOL_COLON,
  SYMBOL_DOT,
  SYMBOL_GREATER,
  SYMBOL_LESS,

  // compound assignment operators
  SYMBOL_PLUS_ASSIGN,     // +=
  SYMBOL_MINUS_ASSIGN,    // -=
  SYMBOL_MULTIPLY_ASSIGN, // *=
  SYMBOL_DIVIDE_ASSIGN,   // /=
  SYMBOL_XOR,             // ^
  SYMBOL_XOR_ASSIGN,      // ^=

  // conditional operators
  SYMBOL_LOGICAL_AND,   // &&
  SYMBOL_LOGICAL_OR,    // ||
  SYMBOL_LOGICAL_NOT,   // !
  SYMBOL_EQUAL,         // ==
  SYMBOL_NOT_EQUAL,     // !=
  SYMBOL_GREATER_EQUAL, // >=
  SYMBOL_LESS_EQUAL,    // <=

  // bitwise operators
  SYMBOL_BIT_AND,                // &
  SYMBOL_BIT_AND_ASSIGN,         // &=
  SYMBOL_BIT_OR,                 // |
  SYMBOL_BIT_OR_ASSIGN,          // |=
  SYMBOL_BIT_SHIFT_LEFT,         // <<
  SYMBOL_BIT_SHIFT_LEFT_ASSIGN,  // <<=
  SYMBOL_BIT_SHIFT_RIGHT,        // >>
  SYMBOL_BIT_SHIFT_RIGHT_ASSIGN, // >>=

  // constants
  CONSTANT_TRUE,
  CONSTANT_FALSE,
  CONSTANT_NULL,
  CONSTANT_STRING,
  CONSTANT_NUMBER,
  CONSTANT_FLOAT,
  CONSTANT_DOUBLE,
  CONSTANT_CHAR,

  // others
  IDENTIFIER,
  EOF_TOKEN
};
